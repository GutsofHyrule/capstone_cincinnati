{"ast":null,"code":"'use strict';\n\nexports.__esModule = true; // istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _utils = require('../utils');\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports['default'] = function (instance) {\n  instance.registerHelper('if', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#if requires exactly one argument');\n    }\n\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    } // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n\n\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n  instance.registerHelper('unless', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#unless requires exactly one argument');\n    }\n\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;;qBAAoC;;yBACd;;;;qBAEP,UAASA,QAAT,EAAmB;EAChCA,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8B,UAASC,WAAT,EAAsBC,OAAtB,EAA+B;IAC3D,IAAIC,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;MACzB,MAAM,2BAAc,mCAAd,CAAN;IACD;;IACD,IAAIC,kBAAWJ,WAAX,CAAJ,EAA6B;MAC3BA,WAAW,GAAGA,WAAW,CAACK,IAAZ,CAAiB,IAAjB,CAAd;IACD,CAN0D;;;;;IAW3D,IAAI,CAAEJ,OAAO,CAACK,IAAR,CAAaC,WAAf,IAA8B,CAACP,WAA/B,IAA+CI,eAAQJ,WAAR,CAAnD,EAAyE;MACvE,OAAOC,OAAO,CAACO,OAAR,CAAgB,IAAhB,CAAP;IACD,CAFD,MAEO;MACL,OAAOP,OAAO,CAACQ,EAAR,CAAW,IAAX,CAAP;IACD;EACF,CAhBD;EAkBAX,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkC,UAASC,WAAT,EAAsBC,OAAtB,EAA+B;IAC/D,IAAIC,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;MACzB,MAAM,2BAAc,uCAAd,CAAN;IACD;;IACD,OAAOL,QAAQ,CAACY,OAAT,CAAiB,IAAjB,EAAuBL,IAAvB,CAA4B,IAA5B,EAAkCL,WAAlC,EAA+C;MACpDS,EAAE,EAAER,OAAO,CAACO,OADwC;MAEpDA,OAAO,EAAEP,OAAO,CAACQ,EAFmC;MAGpDH,IAAI,EAAEL,OAAO,CAACK;IAHsC,CAA/C,CAAP;EAKD,CATD;AAUD","names":["instance","registerHelper","conditional","options","arguments","length","_utils","call","hash","includeZero","inverse","fn","helpers"],"sources":["../../../../lib/handlebars/helpers/if.js"],"sourcesContent":["import { isEmpty, isFunction } from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#if requires exactly one argument');\n    }\n    if (isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}