{"ast":null,"code":"export default class Walker {\n  constructor(order) {\n    this.order = order;\n    this.stack = [];\n  }\n\n  visit(node, callback) {\n    if (!node) {\n      return;\n    }\n\n    this.stack.push(node);\n\n    if (this.order === 'post') {\n      this.children(node, callback);\n      callback(node, this);\n    } else {\n      callback(node, this);\n      this.children(node, callback);\n    }\n\n    this.stack.pop();\n  }\n\n  children(node, callback) {\n    let visitor = visitors[node.type];\n\n    if (visitor) {\n      visitor(this, node, callback);\n    }\n  }\n\n}\nlet visitors = {\n  Program(walker, node, callback) {\n    for (let i = 0; i < node.body.length; i++) {\n      walker.visit(node.body[i], callback);\n    }\n  },\n\n  ElementNode(walker, node, callback) {\n    for (let i = 0; i < node.children.length; i++) {\n      walker.visit(node.children[i], callback);\n    }\n  },\n\n  BlockStatement(walker, node, callback) {\n    walker.visit(node.program, callback);\n    walker.visit(node.inverse || null, callback);\n  }\n\n};","map":{"version":3,"mappings":"AAKA,eAAc,MAAOA,MAAP,CAAa;EAEzBC,YAAmBC,KAAnB,EAA8B;IAAX,KAAKA,KAAL;IADZ,KAAKC,KAAL,GAAe,EAAf;EAC2B;;EAE7BC,MAAqBC,IAArB,EAAsCC,QAAtC,EAA+D;IAClE,IAAI,CAACD,IAAL,EAAW;MACF;IACR;;IAEG,KAACF,KAAD,CAAOI,IAAP,CAAYF,IAAZ;;IAEJ,IAAI,KAAKH,KAAL,KAAe,MAAnB,EAA2B;MACrB,KAACM,QAAD,CAAUH,IAAV,EAAgBC,QAAhB;MACIA,SAACD,IAAD,EAAO,IAAP;IACT,CAHD,MAGO;MACGC,SAACD,IAAD,EAAO,IAAP;MACJ,KAACG,QAAD,CAAUH,IAAV,EAAgBC,QAAhB;IACL;;IAEG,KAACH,KAAD,CAAOM,GAAP;EACL;;EAEOD,SAACH,IAAD,EAAYC,QAAZ,EAAyB;IAC/B,IAAII,OAAO,GAAGC,QAAQ,CAACN,IAAI,CAACO,IAAN,CAAtB;;IACA,IAAIF,OAAJ,EAAa;MACJA,QAAC,IAAD,EAAOL,IAAP,EAAaC,QAAb;IAEX;EACD;;AA5B0B;AA8B3B,IAAIK,QAAQ;EACHE,QAACC,MAAD,EAAiBT,IAAjB,EAAoCC,QAApC,EAAoE;IACzE,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,IAAL,CAAUC,MAA9B,EAAsCF,CAAG,EAAzC,EAA2C;MACnCD,OAACV,KAAD,CAAOC,IAAI,CAACW,IAAL,CAAUD,CAAV,CAAP,EAAqBT,QAArB;IAEV;EAAC,CALS;;EAOCY,YAACJ,MAAD,EAAiBT,IAAjB,EAAwCC,QAAxC,EAAwE;IACjF,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACG,QAAL,CAAcS,MAAlC,EAA0CF,CAAG,EAA7C,EAA+C;MACvCD,OAACV,KAAD,CAAOC,IAAI,CAACG,QAAL,CAAcO,CAAd,CAAP,EAAyBT,QAAzB;IAEV;EAAC,CAXS;;EAaIa,eAACL,MAAD,EAAiBT,IAAjB,EAA2CC,QAA3C,EAA8E;IACpFQ,OAACV,KAAD,CAAOC,IAAI,CAACe,OAAZ,EAAqBd,QAArB;IACAQ,OAACV,KAAD,CAAOC,IAAI,CAACgB,OAAL,IAAgB,IAAvB,EAA6Bf,QAA7B;EAER;;AAjBU,CAAZ","names":["Walker","constructor","order","stack","visit","node","callback","push","children","pop","visitor","visitors","type","Program","walker","i","body","length","ElementNode","BlockStatement","program","inverse"],"sourceRoot":"","sources":["../../../../../packages/@glimmer/syntax/lib/traversal/walker.ts"],"sourcesContent":["import { Option } from '@glimmer/interfaces';\nimport * as AST from '../types/nodes';\n\nexport type NodeCallback<N extends AST.Node> = (node: N, walker: Walker) => void;\n\nexport default class Walker {\n  public stack: any[] = [];\n  constructor(public order?: any) {}\n\n  visit<N extends AST.Node>(node: Option<N>, callback: NodeCallback<N>) {\n    if (!node) {\n      return;\n    }\n\n    this.stack.push(node);\n\n    if (this.order === 'post') {\n      this.children(node, callback);\n      callback(node, this);\n    } else {\n      callback(node, this);\n      this.children(node, callback);\n    }\n\n    this.stack.pop();\n  }\n\n  children(node: any, callback: any) {\n    let visitor = visitors[node.type];\n    if (visitor) {\n      visitor(this, node, callback);\n    }\n  }\n}\n\nlet visitors = {\n  Program(walker: Walker, node: AST.Program, callback: NodeCallback<AST.Node>) {\n    for (let i = 0; i < node.body.length; i++) {\n      walker.visit(node.body[i], callback);\n    }\n  },\n\n  ElementNode(walker: Walker, node: AST.ElementNode, callback: NodeCallback<AST.Node>) {\n    for (let i = 0; i < node.children.length; i++) {\n      walker.visit(node.children[i], callback);\n    }\n  },\n\n  BlockStatement(walker: Walker, node: AST.BlockStatement, callback: NodeCallback<AST.Program>) {\n    walker.visit(node.program, callback);\n    walker.visit(node.inverse || null, callback);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}