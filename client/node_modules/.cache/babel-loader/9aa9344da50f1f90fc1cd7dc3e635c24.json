{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('./utils');\n\nvar logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function lookupLevel(level) {\n    if (typeof level === 'string') {\n      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());\n\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n  // Can be overridden in the host environment\n  log: function log(level) {\n    level = logger.lookupLevel(level);\n\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      var method = logger.methodMap[level]; // eslint-disable-next-line no-console\n\n      if (!console[method]) {\n        method = 'log';\n      }\n\n      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        message[_key - 1] = arguments[_key];\n      }\n\n      console[method].apply(console, message); // eslint-disable-line no-console\n    }\n  }\n};\nexports['default'] = logger;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;qBAAwB;;AAExB,IAAIA,MAAM,GAAG;EACXC,SAAS,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,CADA;EAEXC,KAAK,EAAE,MAFI;;EAKXC,WAAW,EAAE,qBAASD,KAAT,EAAgB;IAC3B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,IAAIE,QAAQ,GAAGC,eAAQL,MAAM,CAACC,SAAf,EAA0BC,KAAK,CAACI,WAAN,EAA1B,CAAf;;MACA,IAAIF,QAAQ,IAAI,CAAhB,EAAmB;QACjBF,KAAK,GAAGE,QAAR;MACD,CAFD,MAEO;QACLF,KAAK,GAAGK,QAAQ,CAACL,KAAD,EAAQ,EAAR,CAAhB;MACD;IACF;;IAED,OAAOA,KAAP;EACD,CAhBU;;EAmBXM,GAAG,EAAE,aAASN,KAAT,EAA4B;IAC/BA,KAAK,GAAGF,MAAM,CAACG,WAAP,CAAmBD,KAAnB,CAAR;;IAEA,IACE,OAAOO,OAAP,KAAmB,WAAnB,IACAT,MAAM,CAACG,WAAP,CAAmBH,MAAM,CAACE,KAA1B,KAAoCA,KAFtC,EAGE;MACA,IAAIQ,MAAM,GAAGV,MAAM,CAACC,SAAP,CAAiBC,KAAjB,CAAb,CADA;;MAGA,IAAI,CAACO,OAAO,CAACC,MAAD,CAAZ,EAAsB;QACpBA,MAAM,GAAG,KAAT;MACD;;wCAXmBC,OAAO;QAAPA,OAAO,UAAP,GAAOC,eAAP;;;MAYpBH,OAAO,CAACC,MAAD,CAAP,CAAcG,KAAd,UAAmBF,OAAnB,EANA,CAM4B;IAC7B;EACF;AAjCU,CAAb;qBAoCeX","names":["logger","methodMap","level","lookupLevel","levelMap","_utils","toLowerCase","parseInt","log","console","method","message","arguments","apply"],"sources":["../../../lib/handlebars/logger.js"],"sourcesContent":["import { indexOf } from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (\n      typeof console !== 'undefined' &&\n      logger.lookupLevel(logger.level) <= level\n    ) {\n      let method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n      console[method](...message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n"]},"metadata":{},"sourceType":"script"}