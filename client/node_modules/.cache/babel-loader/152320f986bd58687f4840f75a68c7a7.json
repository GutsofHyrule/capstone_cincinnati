{"ast":null,"code":"function tuple() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args;\n} // ensure stays in sync with typing\n// ParentNode and ChildKey types are derived from VisitorKeysMap\n\n\nconst visitorKeys = {\n  Program: tuple('body'),\n  MustacheStatement: tuple('path', 'params', 'hash'),\n  BlockStatement: tuple('path', 'params', 'hash', 'program', 'inverse'),\n  ElementModifierStatement: tuple('path', 'params', 'hash'),\n  PartialStatement: tuple('name', 'params', 'hash'),\n  CommentStatement: tuple(),\n  MustacheCommentStatement: tuple(),\n  ElementNode: tuple('attributes', 'modifiers', 'children', 'comments'),\n  AttrNode: tuple('value'),\n  TextNode: tuple(),\n  ConcatStatement: tuple('parts'),\n  SubExpression: tuple('path', 'params', 'hash'),\n  PathExpression: tuple(),\n  StringLiteral: tuple(),\n  BooleanLiteral: tuple(),\n  NumberLiteral: tuple(),\n  NullLiteral: tuple(),\n  UndefinedLiteral: tuple(),\n  Hash: tuple('pairs'),\n  HashPair: tuple('value')\n};\nexport default visitorKeys;","map":{"version":3,"mappings":"AAEA,SAASA,KAAT,GAA8B;EAAA,kCAATC,IAAS;IAATA,IAAS;EAAA;;EAC5B,OAAOA,IAAP;AACD,C,CAED;AACA;;;AACA,MAAMC,WAAW;EACRC,SAAEH,KAAK,CAAC,MAAD,CADC;EAEEI,mBAAEJ,KAAK,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAFT;EAGDK,gBAAEL,KAAK,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,EAA2B,SAA3B,EAAsC,SAAtC,CAHN;EAISM,0BAAEN,KAAK,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAJhB;EAKCO,kBAAEP,KAAK,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CALR;EAMCQ,kBAAER,KAAO,EANV;EAOSS,0BAAET,KAAO,EAPlB;EAQJU,aAAEV,KAAK,CAAC,YAAD,EAAe,WAAf,EAA4B,UAA5B,EAAwC,UAAxC,CARH;EASPW,UAAEX,KAAK,CAAC,OAAD,CATA;EAUPY,UAAEZ,KAAO,EAVF;EAYAa,iBAAEb,KAAK,CAAC,OAAD,CAZP;EAaFc,eAAEd,KAAK,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,CAbL;EAcDe,gBAAEf,KAAO,EAdR;EAgBFgB,eAAEhB,KAAO,EAhBP;EAiBDiB,gBAAEjB,KAAO,EAjBR;EAkBFkB,eAAElB,KAAO,EAlBP;EAmBJmB,aAAEnB,KAAO,EAnBL;EAoBCoB,kBAAEpB,KAAO,EApBV;EAsBXqB,MAAErB,KAAK,CAAC,OAAD,CAtBI;EAuBPsB,UAAEtB,KAAK,CAAC,OAAD;AAvBA,CAAjB;AA0BA,eAAeE,WAAf","names":["tuple","args","visitorKeys","Program","MustacheStatement","BlockStatement","ElementModifierStatement","PartialStatement","CommentStatement","MustacheCommentStatement","ElementNode","AttrNode","TextNode","ConcatStatement","SubExpression","PathExpression","StringLiteral","BooleanLiteral","NumberLiteral","NullLiteral","UndefinedLiteral","Hash","HashPair"],"sourceRoot":"","sources":["../../../../../packages/@glimmer/syntax/lib/types/visitor-keys.ts"],"sourcesContent":["function tuple(): never[];\nfunction tuple<T extends string[]>(...args: T): T;\nfunction tuple<T>(...args: T[]): T[] {\n  return args;\n}\n\n// ensure stays in sync with typing\n// ParentNode and ChildKey types are derived from VisitorKeysMap\nconst visitorKeys = {\n  Program: tuple('body'),\n  MustacheStatement: tuple('path', 'params', 'hash'),\n  BlockStatement: tuple('path', 'params', 'hash', 'program', 'inverse'),\n  ElementModifierStatement: tuple('path', 'params', 'hash'),\n  PartialStatement: tuple('name', 'params', 'hash'),\n  CommentStatement: tuple(),\n  MustacheCommentStatement: tuple(),\n  ElementNode: tuple('attributes', 'modifiers', 'children', 'comments'),\n  AttrNode: tuple('value'),\n  TextNode: tuple(),\n\n  ConcatStatement: tuple('parts'),\n  SubExpression: tuple('path', 'params', 'hash'),\n  PathExpression: tuple(),\n\n  StringLiteral: tuple(),\n  BooleanLiteral: tuple(),\n  NumberLiteral: tuple(),\n  NullLiteral: tuple(),\n  UndefinedLiteral: tuple(),\n\n  Hash: tuple('pairs'),\n  HashPair: tuple('value'),\n};\n\nexport default visitorKeys;\n\nexport type VisitorKeysMap = typeof visitorKeys;\n"]},"metadata":{},"sourceType":"module"}