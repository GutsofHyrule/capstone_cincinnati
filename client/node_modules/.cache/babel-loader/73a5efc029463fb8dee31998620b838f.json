{"ast":null,"code":"import visitorKeys from '../types/visitor-keys';\nimport { cannotRemoveNode, cannotReplaceNode, cannotReplaceOrRemoveInKeyHandlerYet } from './errors';\n\nfunction getEnterFunction(handler) {\n  return typeof handler === 'function' ? handler : handler.enter;\n}\n\nfunction getExitFunction(handler) {\n  return typeof handler !== 'function' ? handler.exit : undefined;\n}\n\nfunction getKeyHandler(handler, key) {\n  let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;\n  if (keyVisitor === undefined) return;\n  let keyHandler = keyVisitor[key];\n\n  if (keyHandler !== undefined) {\n    // widen specific key to all keys\n    return keyHandler;\n  }\n\n  return keyVisitor.All;\n}\n\nfunction getNodeHandler(visitor, nodeType) {\n  let handler = visitor[nodeType];\n\n  if (handler !== undefined) {\n    // widen specific Node to all nodes\n    return handler;\n  }\n\n  return visitor.All;\n}\n\nfunction visitNode(visitor, node) {\n  let handler = getNodeHandler(visitor, node.type);\n  let enter;\n  let exit;\n\n  if (handler !== undefined) {\n    enter = getEnterFunction(handler);\n    exit = getExitFunction(handler);\n  }\n\n  let result;\n\n  if (enter !== undefined) {\n    result = enter(node);\n  }\n\n  if (result !== undefined && result !== null) {\n    if (JSON.stringify(node) === JSON.stringify(result)) {\n      result = undefined;\n    } else if (Array.isArray(result)) {\n      visitArray(visitor, result);\n      return result;\n    } else {\n      return visitNode(visitor, result) || result;\n    }\n  }\n\n  if (result === undefined) {\n    let keys = visitorKeys[node.type];\n\n    for (let i = 0; i < keys.length; i++) {\n      // we know if it has child keys we can widen to a ParentNode\n      visitKey(visitor, handler, node, keys[i]);\n    }\n\n    if (exit !== undefined) {\n      result = exit(node);\n    }\n  }\n\n  return result;\n}\n\nfunction visitKey(visitor, handler, node, key) {\n  let value = node[key];\n\n  if (!value) {\n    return;\n  }\n\n  let keyEnter;\n  let keyExit;\n\n  if (handler !== undefined) {\n    let keyHandler = getKeyHandler(handler, key);\n\n    if (keyHandler !== undefined) {\n      keyEnter = getEnterFunction(keyHandler);\n      keyExit = getExitFunction(keyHandler);\n    }\n  }\n\n  if (keyEnter !== undefined) {\n    if (keyEnter(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    visitArray(visitor, value);\n  } else {\n    let result = visitNode(visitor, value);\n\n    if (result !== undefined) {\n      assignKey(node, key, result);\n    }\n  }\n\n  if (keyExit !== undefined) {\n    if (keyExit(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n}\n\nfunction visitArray(visitor, array) {\n  for (let i = 0; i < array.length; i++) {\n    let result = visitNode(visitor, array[i]);\n\n    if (result !== undefined) {\n      i += spliceArray(array, i, result) - 1;\n    }\n  }\n}\n\nfunction assignKey(node, key, result) {\n  if (result === null) {\n    throw cannotRemoveNode(node[key], node, key);\n  } else if (Array.isArray(result)) {\n    if (result.length === 1) {\n      node[key] = result[0];\n    } else {\n      if (result.length === 0) {\n        throw cannotRemoveNode(node[key], node, key);\n      } else {\n        throw cannotReplaceNode(node[key], node, key);\n      }\n    }\n  } else {\n    node[key] = result;\n  }\n}\n\nfunction spliceArray(array, index, result) {\n  if (result === null) {\n    array.splice(index, 1);\n    return 0;\n  } else if (Array.isArray(result)) {\n    array.splice(index, 1, ...result);\n    return result.length;\n  } else {\n    array.splice(index, 1, result);\n    return 1;\n  }\n}\n\nexport default function traverse(node, visitor) {\n  visitNode(visitor, node);\n}","map":{"version":3,"mappings":"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","names":["visitorKeys","cannotRemoveNode","cannotReplaceNode","cannotReplaceOrRemoveInKeyHandlerYet","getEnterFunction","handler","enter","getExitFunction","exit","undefined","getKeyHandler","key","keyVisitor","keys","keyHandler","All","getNodeHandler","visitor","nodeType","visitNode","node","type","result","JSON","stringify","Array","isArray","visitArray","i","length","visitKey","value","keyEnter","keyExit","assignKey","array","spliceArray","index","splice","traverse"],"sourceRoot":"","sources":["../../../../../packages/@glimmer/syntax/lib/traversal/traverse.ts"],"sourcesContent":["import visitorKeys from '../types/visitor-keys';\nimport {\n  cannotRemoveNode,\n  cannotReplaceNode,\n  cannotReplaceOrRemoveInKeyHandlerYet,\n} from './errors';\nimport { Node, NodeType, ParentNode, ChildKey } from '../types/nodes';\nimport { NodeVisitor, NodeFunction, NodeHandler, KeyFunction, KeyHandler } from '../types/visitor';\n\nfunction getEnterFunction(handler: KeyHandler): KeyFunction | undefined;\nfunction getEnterFunction(handler: NodeHandler): NodeFunction | undefined;\nfunction getEnterFunction(\n  handler: NodeHandler | KeyHandler\n): NodeFunction | KeyFunction | undefined {\n  return typeof handler === 'function' ? handler : handler.enter;\n}\n\nfunction getExitFunction(handler: KeyHandler): KeyFunction | undefined;\nfunction getExitFunction(handler: NodeHandler): NodeFunction | undefined;\nfunction getExitFunction(\n  handler: NodeHandler | KeyHandler\n): NodeFunction | KeyFunction | undefined {\n  return typeof handler !== 'function' ? handler.exit : undefined;\n}\n\nfunction getKeyHandler(handler: NodeHandler, key: ChildKey): KeyHandler | undefined {\n  let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;\n  if (keyVisitor === undefined) return;\n  let keyHandler = keyVisitor[key];\n  if (keyHandler !== undefined) {\n    // widen specific key to all keys\n    return keyHandler as KeyHandler;\n  }\n  return keyVisitor.All;\n}\n\nfunction getNodeHandler(visitor: NodeVisitor, nodeType: NodeType): NodeHandler | undefined {\n  let handler = visitor[nodeType];\n  if (handler !== undefined) {\n    // widen specific Node to all nodes\n    return handler as NodeHandler;\n  }\n  return visitor.All;\n}\n\nfunction visitNode(visitor: NodeVisitor, node: Node): Node | Node[] | undefined | null | void {\n  let handler = getNodeHandler(visitor, node.type);\n  let enter: NodeFunction | undefined;\n  let exit: NodeFunction | undefined;\n\n  if (handler !== undefined) {\n    enter = getEnterFunction(handler);\n    exit = getExitFunction(handler);\n  }\n\n  let result: Node | Node[] | undefined | null | void;\n  if (enter !== undefined) {\n    result = enter(node);\n  }\n\n  if (result !== undefined && result !== null) {\n    if (JSON.stringify(node) === JSON.stringify(result)) {\n      result = undefined;\n    } else if (Array.isArray(result)) {\n      visitArray(visitor, result);\n      return result;\n    } else {\n      return visitNode(visitor, result) || result;\n    }\n  }\n\n  if (result === undefined) {\n    let keys = visitorKeys[node.type];\n\n    for (let i = 0; i < keys.length; i++) {\n      // we know if it has child keys we can widen to a ParentNode\n      visitKey(visitor, handler, node as ParentNode, keys[i]);\n    }\n\n    if (exit !== undefined) {\n      result = exit(node);\n    }\n  }\n\n  return result;\n}\n\nfunction visitKey(\n  visitor: NodeVisitor,\n  handler: NodeHandler | undefined,\n  node: ParentNode,\n  key: ChildKey\n) {\n  let value = node[key] as Node | Node[] | null | undefined;\n  if (!value) {\n    return;\n  }\n\n  let keyEnter: KeyFunction | undefined;\n  let keyExit: KeyFunction | undefined;\n\n  if (handler !== undefined) {\n    let keyHandler = getKeyHandler(handler, key);\n    if (keyHandler !== undefined) {\n      keyEnter = getEnterFunction(keyHandler);\n      keyExit = getExitFunction(keyHandler);\n    }\n  }\n\n  if (keyEnter !== undefined) {\n    if (keyEnter(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    visitArray(visitor, value);\n  } else {\n    let result = visitNode(visitor, value);\n    if (result !== undefined) {\n      assignKey(node, key, result);\n    }\n  }\n\n  if (keyExit !== undefined) {\n    if (keyExit(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n}\n\nfunction visitArray(visitor: NodeVisitor, array: Node[]) {\n  for (let i = 0; i < array.length; i++) {\n    let result = visitNode(visitor, array[i]);\n    if (result !== undefined) {\n      i += spliceArray(array, i, result) - 1;\n    }\n  }\n}\n\nfunction assignKey(node: Node, key: ChildKey, result: Node | Node[] | null) {\n  if (result === null) {\n    throw cannotRemoveNode(node[key], node, key);\n  } else if (Array.isArray(result)) {\n    if (result.length === 1) {\n      node[key] = result[0];\n    } else {\n      if (result.length === 0) {\n        throw cannotRemoveNode(node[key], node, key);\n      } else {\n        throw cannotReplaceNode(node[key], node, key);\n      }\n    }\n  } else {\n    node[key] = result;\n  }\n}\n\nfunction spliceArray(array: Node[], index: number, result: Node | Node[] | null) {\n  if (result === null) {\n    array.splice(index, 1);\n    return 0;\n  } else if (Array.isArray(result)) {\n    array.splice(index, 1, ...result);\n    return result.length;\n  } else {\n    array.splice(index, 1, result);\n    return 1;\n  }\n}\n\nexport default function traverse(node: Node, visitor: NodeVisitor) {\n  visitNode(visitor, node);\n}\n"]},"metadata":{},"sourceType":"module"}