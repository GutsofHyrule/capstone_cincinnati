{"ast":null,"code":"const TraversalError = function () {\n  TraversalError.prototype = Object.create(Error.prototype);\n  TraversalError.prototype.constructor = TraversalError;\n\n  function TraversalError(message, node, parent, key) {\n    let error = Error.call(this, message);\n    this.key = key;\n    this.message = message;\n    this.node = node;\n    this.parent = parent;\n    this.stack = error.stack;\n  }\n\n  return TraversalError;\n}();\n\nexport default TraversalError;\nexport function cannotRemoveNode(node, parent, key) {\n  return new TraversalError('Cannot remove a node unless it is part of an array', node, parent, key);\n}\nexport function cannotReplaceNode(node, parent, key) {\n  return new TraversalError('Cannot replace a node with multiple nodes unless it is part of an array', node, parent, key);\n}\nexport function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {\n  return new TraversalError('Replacing and removing in key handlers is not yet supported.', node, null, key);\n}","map":{"version":3,"mappings":"AAeA,MAAMA,cAAc,GAA+B;EACnCA,eAACC,SAAD,GAAaC,MAAM,CAACC,MAAP,CAAcC,KAAK,CAACH,SAApB,CAAb;EACAD,eAACC,SAAD,CAAWI,WAAX,GAAyBL,cAAzB;;EAEd,SAASA,cAAT,CAEEM,OAFF,EAGEC,IAHF,EAIEC,MAJF,EAKEC,GALF,EAKa;IAEX,IAAIC,KAAK,GAAGN,KAAK,CAACO,IAAN,CAAW,IAAX,EAAiBL,OAAjB,CAAZ;IAEI,KAACG,GAAD,GAAOA,GAAP;IACA,KAACH,OAAD,GAAWA,OAAX;IACA,KAACC,IAAD,GAAQA,IAAR;IACA,KAACC,MAAD,GAAUA,MAAV;IACA,KAACI,KAAD,GAASF,KAAK,CAACE,KAAf;EACL;;EAED,OAAOZ,cAAP;AApBgD,CAAC,EAAnD;;AAuBA,eAAeA,cAAf;AAEA,OAAM,SAAUa,gBAAV,CAA2BN,IAA3B,EAA2CC,MAA3C,EAA6DC,GAA7D,EAAwE;EAC5E,OAAO,IAAIT,cAAJ,CACL,oDADK,EAELO,IAFK,EAGLC,MAHK,EAILC,GAJK,CAAP;AAMD;AAED,OAAM,SAAUK,iBAAV,CAA4BP,IAA5B,EAA4CC,MAA5C,EAA8DC,GAA9D,EAAyE;EAC7E,OAAO,IAAIT,cAAJ,CACL,yEADK,EAELO,IAFK,EAGLC,MAHK,EAILC,GAJK,CAAP;AAMD;AAED,OAAM,SAAUM,oCAAV,CAA+CR,IAA/C,EAA+DE,GAA/D,EAA0E;EAC9E,OAAO,IAAIT,cAAJ,CACL,8DADK,EAELO,IAFK,EAGL,IAHK,EAILE,GAJK,CAAP;AAMD","names":["TraversalError","prototype","Object","create","Error","constructor","message","node","parent","key","error","call","stack","cannotRemoveNode","cannotReplaceNode","cannotReplaceOrRemoveInKeyHandlerYet"],"sourceRoot":"","sources":["../../../../../packages/@glimmer/syntax/lib/traversal/errors.ts"],"sourcesContent":["import * as AST from '../types/nodes';\nimport { Option } from '@glimmer/interfaces';\n\nexport interface TraversalError extends Error {\n  constructor: TraversalErrorConstructor;\n  key: string;\n  node: AST.Node;\n  parent: Option<AST.Node>;\n}\n\nexport interface TraversalErrorConstructor {\n  new (message: string, node: AST.Node, parent: Option<AST.Node>, key: string): TraversalError;\n  readonly prototype: TraversalError;\n}\n\nconst TraversalError: TraversalErrorConstructor = (function() {\n  TraversalError.prototype = Object.create(Error.prototype);\n  TraversalError.prototype.constructor = TraversalError;\n\n  function TraversalError(\n    this: TraversalError,\n    message: string,\n    node: AST.Node,\n    parent: Option<AST.Node>,\n    key: string\n  ) {\n    let error = Error.call(this, message);\n\n    this.key = key;\n    this.message = message;\n    this.node = node;\n    this.parent = parent;\n    this.stack = error.stack;\n  }\n\n  return TraversalError as any;\n})();\n\nexport default TraversalError;\n\nexport function cannotRemoveNode(node: AST.Node, parent: AST.Node, key: string) {\n  return new TraversalError(\n    'Cannot remove a node unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceNode(node: AST.Node, parent: AST.Node, key: string) {\n  return new TraversalError(\n    'Cannot replace a node with multiple nodes unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceOrRemoveInKeyHandlerYet(node: AST.Node, key: string) {\n  return new TraversalError(\n    'Replacing and removing in key handlers is not yet supported.',\n    node,\n    null,\n    key\n  );\n}\n"]},"metadata":{},"sourceType":"module"}