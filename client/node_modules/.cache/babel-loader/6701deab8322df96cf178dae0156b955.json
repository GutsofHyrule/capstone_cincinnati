{"ast":null,"code":"export function unwrap(val) {\n  if (val === null || val === undefined) throw new Error(`Expected value to be present`);\n  return val;\n}\nexport function expect(val, message) {\n  if (val === null || val === undefined) throw new Error(message);\n  return val;\n}\nexport function unreachable() {\n  let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unreachable';\n  return new Error(message);\n}","map":{"version":3,"mappings":"AAMA,OAAM,SAAUA,MAAV,CAAoBC,GAApB,EAAiC;EACrC,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC,MAAM,IAAIC,KAAJ,CAA0C,8BAA1C,CAAN;EACvC,OAAOF,GAAP;AACD;AAED,OAAM,SAAUG,MAAV,CAAoBH,GAApB,EAAmCI,OAAnC,EAAkD;EACtD,IAAIJ,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC,MAAM,IAAIC,KAAJ,CAAUE,OAAV,CAAN;EACvC,OAAOJ,GAAP;AACD;AAED,OAAM,SAAUK,WAAV,GAA6C;EAAA,IAAvBD,OAAuB,uEAAb,aAAa;EACjD,OAAO,IAAIF,KAAJ,CAAUE,OAAV,CAAP;AACD","names":["unwrap","val","undefined","Error","expect","message","unreachable"],"sourceRoot":"","sources":["../../../../packages/@glimmer/util/lib/platform-utils.ts"],"sourcesContent":["export type Opaque = {} | void | null | undefined;\nexport type Option<T> = T | null;\nexport type Maybe<T> = Option<T> | undefined | void;\n\nexport type Factory<T> = new (...args: Opaque[]) => T;\n\nexport function unwrap<T>(val: Maybe<T>): T {\n  if (val === null || val === undefined) throw new Error(`Expected value to be present`);\n  return val as T;\n}\n\nexport function expect<T>(val: Maybe<T>, message: string): T {\n  if (val === null || val === undefined) throw new Error(message);\n  return val as T;\n}\n\nexport function unreachable(message = 'unreachable'): Error {\n  return new Error(message);\n}\n"]},"metadata":{},"sourceType":"module"}