{"ast":null,"code":"const {\n  keys: objKeys\n} = Object;\nexport function assign(obj) {\n  for (let i = 1; i < arguments.length; i++) {\n    let assignment = arguments[i];\n    if (assignment === null || typeof assignment !== 'object') continue;\n    let keys = objKeys(assignment);\n\n    for (let j = 0; j < keys.length; j++) {\n      let key = keys[j];\n      obj[key] = assignment[key];\n    }\n  }\n\n  return obj;\n}\nexport function fillNulls(count) {\n  let arr = new Array(count);\n\n  for (let i = 0; i < count; i++) {\n    arr[i] = null;\n  }\n\n  return arr;\n}","map":{"version":3,"mappings":"AAAA,MAAM;EAAEA,IAAI,EAAEC;AAAR,IAAoBC,MAA1B;AAwBA,OAAM,SAAUC,MAAV,CAAiBC,GAAjB,EAAyB;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAG,EAAzC,EAA2C;IACzC,IAAIG,UAAU,GAAGF,SAAS,CAACD,CAAD,CAA1B;IACA,IAAIG,UAAU,KAAK,IAAf,IAAuB,OAAOA,UAAP,KAAsB,QAAjD,EAA2D;IAC3D,IAAIR,IAAI,GAAGC,OAAO,CAACO,UAAD,CAAlB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACO,MAAzB,EAAiCE,CAAG,EAApC,EAAsC;MACpC,IAAIC,GAAG,GAAGV,IAAI,CAACS,CAAD,CAAd;MACGL,IAACM,GAAD,IAAQF,UAAU,CAACE,GAAD,CAAlB;IACJ;EACF;;EACD,OAAON,GAAP;AACD;AAED,OAAM,SAAUO,SAAV,CAAuBC,KAAvB,EAAoC;EACxC,IAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAUF,KAAV,CAAV;;EAEA,KAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,KAApB,EAA2BP,CAAG,EAA9B,EAAgC;IAC3BQ,IAACR,CAAD,IAAM,IAAN;EACJ;;EAED,OAAOQ,GAAP;AACD","names":["keys","objKeys","Object","assign","obj","i","arguments","length","assignment","j","key","fillNulls","count","arr","Array"],"sourceRoot":"","sources":["../../../../packages/@glimmer/util/lib/object-utils.ts"],"sourcesContent":["const { keys: objKeys } = Object;\n\nexport function assign<T, U>(obj: T, assignments: U): T & U;\nexport function assign<T, U, V>(obj: T, a: U, b: V): T & U & V;\nexport function assign<T, U, V, W>(obj: T, a: U, b: V, c: W): T & U & V & W;\nexport function assign<T, U, V, W, X>(obj: T, a: U, b: V, c: W, d: X): T & U & V & W & X;\nexport function assign<T, U, V, W, X, Y>(\n  obj: T,\n  a: U,\n  b: V,\n  c: W,\n  d: X,\n  e: Y\n): T & U & V & W & X & Y;\nexport function assign<T, U, V, W, X, Y, Z>(\n  obj: T,\n  a: U,\n  b: V,\n  c: W,\n  d: X,\n  e: Y,\n  f: Z\n): T & U & V & W & X & Y & Z;\nexport function assign(target: any, ...args: any[]): any;\nexport function assign(obj: any) {\n  for (let i = 1; i < arguments.length; i++) {\n    let assignment = arguments[i];\n    if (assignment === null || typeof assignment !== 'object') continue;\n    let keys = objKeys(assignment);\n    for (let j = 0; j < keys.length; j++) {\n      let key = keys[j];\n      obj[key] = assignment[key];\n    }\n  }\n  return obj;\n}\n\nexport function fillNulls<T>(count: number): T[] {\n  let arr = new Array(count);\n\n  for (let i = 0; i < count; i++) {\n    arr[i] = null;\n  }\n\n  return arr;\n}\n"]},"metadata":{},"sourceType":"module"}