{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.parseWithoutProcessing = parseWithoutProcessing;\nexports.parse = parse; // istanbul ignore next\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n} // istanbul ignore next\n\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _whitespaceControl = require('./whitespace-control');\n\nvar _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);\n\nvar _helpers = require('./helpers');\n\nvar Helpers = _interopRequireWildcard(_helpers);\n\nvar _utils = require('../utils');\n\nexports.parser = _parser2['default'];\nvar yy = {};\n\n_utils.extend(yy, Helpers);\n\nfunction parseWithoutProcessing(input, options) {\n  // Just return if an already-compiled AST was passed in.\n  if (input.type === 'Program') {\n    return input;\n  }\n\n  _parser2['default'].yy = yy; // Altering the shared object here, but this is ok as parser is a sync operation\n\n  yy.locInfo = function (locInfo) {\n    return new yy.SourceLocation(options && options.srcName, locInfo);\n  };\n\n  var ast = _parser2['default'].parse(input);\n\n  return ast;\n}\n\nfunction parse(input, options) {\n  var ast = parseWithoutProcessing(input, options);\n  var strip = new _whitespaceControl2['default'](options);\n  return strip.accept(ast);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAAmB;;;;iCACW;;;;uBACL;;IAAbA,OAAO;;qBACI;;QAEdC,SAAMC;AAEf,IAAIC,EAAE,GAAG,EAAT;;AACAC,cAAOD,EAAP,EAAWH,OAAX;;AAEO,SAASK,sBAAT,CAAgCC,KAAhC,EAAuCC,OAAvC,EAAgD;;EAErD,IAAID,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;IAC5B,OAAOF,KAAP;EACD;;EAEDJ,oBAAOC,EAAP,GAAYA,EAAZ,CANqD;;EASrDA,EAAE,CAACM,OAAH,GAAa,UAASA,OAAT,EAAkB;IAC7B,OAAO,IAAIN,EAAE,CAACO,cAAP,CAAsBH,OAAO,IAAIA,OAAO,CAACI,OAAzC,EAAkDF,OAAlD,CAAP;EACD,CAFD;;EAIA,IAAIG,GAAG,GAAGV,oBAAOW,KAAP,CAAaP,KAAb,CAAV;;EAEA,OAAOM,GAAP;AACD;;AAEM,SAASC,KAAT,CAAeP,KAAf,EAAsBC,OAAtB,EAA+B;EACpC,IAAIK,GAAG,GAAGP,sBAAsB,CAACC,KAAD,EAAQC,OAAR,CAAhC;EACA,IAAIO,KAAK,GAAG,mCAAsBP,OAAtB,CAAZ;EAEA,OAAOO,KAAK,CAACC,MAAN,CAAaH,GAAb,CAAP;AACD","names":["Helpers","parser","_parser2","yy","_utils","parseWithoutProcessing","input","options","type","locInfo","SourceLocation","srcName","ast","parse","strip","accept"],"sources":["../../../../lib/handlebars/compiler/base.js"],"sourcesContent":["import parser from './parser';\nimport WhitespaceControl from './whitespace-control';\nimport * as Helpers from './helpers';\nimport { extend } from '../utils';\n\nexport { parser };\n\nlet yy = {};\nextend(yy, Helpers);\n\nexport function parseWithoutProcessing(input, options) {\n  // Just return if an already-compiled AST was passed in.\n  if (input.type === 'Program') {\n    return input;\n  }\n\n  parser.yy = yy;\n\n  // Altering the shared object here, but this is ok as parser is a sync operation\n  yy.locInfo = function(locInfo) {\n    return new yy.SourceLocation(options && options.srcName, locInfo);\n  };\n\n  let ast = parser.parse(input);\n\n  return ast;\n}\n\nexport function parse(input, options) {\n  let ast = parseWithoutProcessing(input, options);\n  let strip = new WhitespaceControl(options);\n\n  return strip.accept(ast);\n}\n"]},"metadata":{},"sourceType":"script"}