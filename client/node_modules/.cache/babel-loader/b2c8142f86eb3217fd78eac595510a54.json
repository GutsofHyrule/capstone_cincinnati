{"ast":null,"code":"/* global define */\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nvar SourceNode = undefined;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    var SourceMap = require('source-map');\n\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {}\n/* NOP */\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\n\n\nif (!SourceNode) {\n  SourceNode = function (line, column, srcFile, chunks) {\n    this.src = '';\n\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  SourceNode.prototype = {\n    add: function add(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n\n      this.src += chunks;\n    },\n    prepend: function prepend(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function toStringWithSourceMap() {\n      return {\n        code: this.toString()\n      };\n    },\n    toString: function toString() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (_utils.isArray(chunk)) {\n    var ret = [];\n\n    for (var i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty: function isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function prepend(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function push(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n  merge: function merge() {\n    var source = this.empty();\n    this.each(function (line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n  each: function each(iter) {\n    for (var i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n  empty: function empty() {\n    var loc = this.currentLocation || {\n      start: {}\n    };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function wrap(chunk) {\n    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || {\n      start: {}\n    } : arguments[1];\n\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n  },\n  functionCall: function functionCall(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n  quotedString: function quotedString(str) {\n    return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n    .replace(/\\u2029/g, '\\\\u2029') + '\"';\n  },\n  objectLiteral: function objectLiteral(obj) {\n    // istanbul ignore next\n    var _this = this;\n\n    var pairs = [];\n    Object.keys(obj).forEach(function (key) {\n      var value = castChunk(obj[key], _this);\n\n      if (value !== 'undefined') {\n        pairs.push([_this.quotedString(key), ':', value]);\n      }\n    });\n    var ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n  generateList: function generateList(entries) {\n    var ret = this.empty();\n\n    for (var i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n  generateArray: function generateArray(entries) {\n    var ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n    return ret;\n  }\n};\nexports['default'] = CodeGen;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["SourceNode","define","amd","SourceMap","require","err","line","column","srcFile","chunks","src","add","prototype","_utils","join","prepend","toStringWithSourceMap","code","toString","castChunk","chunk","codeGen","loc","ret","i","len","length","push","wrap","CodeGen","source","isEmpty","unshift","merge","empty","each","iter","currentLocation","start","arguments","functionCall","fn","type","params","generateList","quotedString","str","replace","objectLiteral","obj","pairs","Object","keys","forEach","value","key","_this","entries","generateArray"],"sources":["../../../../lib/handlebars/compiler/code-gen.js"],"sourcesContent":["/* global define */\nimport { isArray } from '../utils';\n\nlet SourceNode;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    let SourceMap = require('source-map');\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {\n  /* NOP */\n}\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function(line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function() {\n      return { code: this.toString() };\n    },\n    toString: function() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (isArray(chunk)) {\n    let ret = [];\n\n    for (let i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n\n  merge: function() {\n    let source = this.empty();\n    this.each(function(line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n\n  each: function(iter) {\n    for (let i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n\n  empty: function() {\n    let loc = this.currentLocation || { start: {} };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function(chunk, loc = this.currentLocation || { start: {} }) {\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n\n    return new SourceNode(\n      loc.start.line,\n      loc.start.column,\n      this.srcFile,\n      chunk\n    );\n  },\n\n  functionCall: function(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n\n  quotedString: function(str) {\n    return (\n      '\"' +\n      (str + '')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n        .replace(/\\u2029/g, '\\\\u2029') +\n      '\"'\n    );\n  },\n\n  objectLiteral: function(obj) {\n    let pairs = [];\n\n    Object.keys(obj).forEach(key => {\n      let value = castChunk(obj[key], this);\n      if (value !== 'undefined') {\n        pairs.push([this.quotedString(key), ':', value]);\n      }\n    });\n\n    let ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n\n  generateList: function(entries) {\n    let ret = this.empty();\n\n    for (let i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n\n  generateArray: function(entries) {\n    let ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n\n    return ret;\n  }\n};\n\nexport default CodeGen;\n"]},"metadata":{},"sourceType":"script"}